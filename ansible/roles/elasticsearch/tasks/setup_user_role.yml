---
- block:
    - name: Check for default passwords and warn or fail
      block:
        - name: Warn if elastic bootstrap password is default
          ansible.builtin.debug:
            msg: |
              [SECURITY WARNING] The Elasticsearch bootstrap password for the 'elastic' user is still set to the default: 'change_me'.
              This password grants full administrative access.
              Please update the password immediately to protect your cluster from unauthorized access.
          when: elasticsearch_bootstrap_password == "change_me"
        
        - name: Warn if any built-in user password is default
          ansible.builtin.debug:
            msg: |
              [SECURITY WARNING] Built-in user '{{ item.username }}' is still using the default password 'change_me'.
              This is a critical security risk and may expose the system to unauthorized access.
              Please update this password immediately.
          with_items: "{{ elasticsearch_builtin_users }}"
          when: item.password == "change_me"
        
        - name: Fail deployment if default passwords are used and enforcement is enabled
          ansible.builtin.fail:
            msg: "Deployment failed: Default passwords ('change_me') are still in use for Elasticsearch users. Set 'enforce_secure_passwords: false' to bypass this check for non-production environments."
          when: 
            - enforce_secure_passwords | default(false) | bool
            - (elasticsearch_bootstrap_password == "change_me" or (elasticsearch_builtin_users | selectattr('password', 'equalto', 'change_me') | list | length > 0))
      run_once: true

    - name: Setup built-in users
      ansible.builtin.uri:
        url: "{{ elasticsearch_protocol }}://{{ inventory_hostname }}.local:{{ elasticsearch_port }}/_security/user/{{ item.username }}/_password"
        url_username: "elastic"
        url_password: "{{ elasticsearch_bootstrap_password }}"
        method: POST
        status_code: 200
        validate_certs: false
        force_basic_auth: true
        body: {"password" : "{{ item.password }}"}
        body_format: json
      with_items: "{{ elasticsearch_builtin_users }}"

    - name: Find & read extra roles from JSON file
      ansible.builtin.slurp:
        src: "{{ item }}"
      with_first_found:
        - "{{ node_custom_config_directory }}/elasticsearch/{{ inventory_hostname }}/extra_roles.json"
        - "{{ node_custom_config_directory }}/elasticsearch/extra_roles.json"
        - "{{ node_custom_config_directory }}/extra_roles.json"
        - "extra_roles.json"
      register: extra_roles_file
      delegate_to: localhost

    - name: Parse extra roles
      set_fact:
        elasticsearch_extra_roles: "{{ extra_roles_file.results[0].content | b64decode | from_json }}"

    - name: Setup extra roles
      ansible.builtin.uri:
        url: "{{ elasticsearch_protocol }}://{{ inventory_hostname }}.local:{{ elasticsearch_port }}/_security/role/{{ item.name }}"
        url_username: elastic
        url_password: "{{ elasticsearch_bootstrap_password }}"
        method: POST
        status_code: 200
        validate_certs: false
        force_basic_auth: true
        body: "{{ item.payload }}"
        body_format: json
      with_items: "{{ elasticsearch_extra_roles.roles }}"
      when: (elasticsearch_extra_roles.get('roles', []) | length) > 0

    - name: Find & read extra users from JSON file
      ansible.builtin.slurp:
        src: "{{ item }}"
      with_first_found:
        - "{{ node_custom_config_directory }}/elasticsearch/{{ inventory_hostname }}/extra_users.json"
        - "{{ node_custom_config_directory }}/elasticsearch/extra_users.json"
        - "{{ node_custom_config_directory }}/extra_users.json"
        - "extra_users.json"
      register: extra_users_file
      delegate_to: localhost

    - name: Parse extra users
      set_fact:
        elasticsearch_extra_users: "{{ extra_users_file.results[0].content | b64decode | from_json }}"

    - name: Setup extra users & assign role
      ansible.builtin.uri:
        url: "{{ elasticsearch_protocol }}://{{ inventory_hostname }}.local:{{ elasticsearch_port }}/_security/user/{{ item.username }}"
        url_username: elastic
        url_password: "{{ elasticsearch_bootstrap_password }}"
        method: POST
        status_code: 200
        validate_certs: false
        force_basic_auth: true
        body: "{{ item.payload }}"
        body_format: json
      with_items: "{{ elasticsearch_extra_users.users }}"
      when: (elasticsearch_extra_users.get('users', []) | length) > 0
  no_log: true
  run_once: true
